/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DimenVision (https://sketchfab.com/DimenVision)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/laptop-05ad6b27aff646deaea29cc8c6bfa6fa
Title: Laptop
*/

import React, { useEffect, useRef } from "react";
import {  useGLTF } from "@react-three/drei";
import laptop from "/3D/laptop.glb";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import { useThree } from "@react-three/fiber";
import * as THREE from "three";

const Laptop = ({ ...props }) => {
  const { nodes, materials } = useGLTF(laptop);


  const { camera, size, viewport, setSize } = useThree();

  const handleResize = () => {
    setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix(); 
  };

  useEffect(() => {
    window.addEventListener("resize", handleResize);
    
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const lpt = useRef(new THREE.Group());



  useGSAP(() => {
    if (lpt.current) {
      const homeTimeline = gsap.timeline({
        scrollTrigger: {
          trigger: props.home.current,
          start: "top -5%",
          end: "50% 15%",
          scrub: 1,
        },
      });

      homeTimeline.to(
        lpt.current.position,
        {
          x: viewport.width / 2 - 0.5,
          duration: 2,
        },
        0
      );

      homeTimeline.to(
        lpt.current.rotation,
        {
          x: Math.PI * 2,
          duration: 2,
        },
        0
      );

      homeTimeline.to(
        lpt.current.scale,
        {
          x: 0.5,
          y: 0.5,
          z: 0.5,
          duration: 2,
          delay: 2,
        },
        0
      );

      const projectTimeline = gsap.timeline({
        scrollTrigger: {
          trigger: props.projects.current,
          start: "-30% 30%",
          end: "50% 50%",
          scrub: 1,
          onEnter: () => {
            lpt.current.position.x = viewport.width / 2 - 0.5;
          },
        },
      });

      projectTimeline.to(
        lpt.current.position,
        {
          x: -(viewport.width / 2) + 0.5,
          duration: 2,
        },
        1
      );

      projectTimeline.to(
        lpt.current.scale,
        {
          x: 2,
          y: 2,
          z: 2,
          duration: 2,
        },
        1
      );
      projectTimeline.to(
        lpt.current.position,
        {
          y: -viewport.height / 2 + 3,
          duration: 2,
        },
        1
      );
    }
  }, [lpt, home]);

  return (
    <group
      position={[-viewport.width / 2 + 0.5, 0, 0]}
      ref={lpt}
      {...props}
      scale={[1, 1, 1]}
      dispose={null}
    >
      <group
        position={[-0.186, 1.099, -0.194]}
        rotation={[0.837, -0.44, 0.154]}
      >
        <group position={[0, 0.504, -1.015]} rotation={[-2.172, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_33.geometry}
            material={materials.Blue}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_34.geometry}
            material={materials.Black_Dark}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_23.geometry}
          material={materials.Blue}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_24.geometry}
          material={materials.Orange}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_25.geometry}
          material={materials.White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_26.geometry}
          material={materials.Yellow}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_27.geometry}
          material={materials.Blue_Dark}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_29.geometry}
          material={materials[".Example_Sheet_033.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_31.geometry}
          material={materials[".Example_Sheet_033.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_36.geometry}
          material={materials.Black_Dark}
          position={[0.965, 0.059, -0.679]}
          rotation={[-2.172, 0, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_38.geometry}
          material={materials.Black_Dark}
          position={[0.965, 0.979, -1.309]}
          rotation={[-2.172, 0, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_40.geometry}
          material={materials.Black_Dark}
          position={[-0.953, 0.979, -1.309]}
          rotation={[-2.172, 0, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_42.geometry}
          material={materials.Black_Dark}
          position={[-0.953, 0.059, -0.679]}
          rotation={[-2.172, 0, 0]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={materials.Yellow}
        position={[-0.478, 0.199, 0.025]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_6.geometry}
        material={materials.Orange}
        position={[0.95, 0.359, 0.12]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_8.geometry}
        material={materials.Yellow}
        position={[-1.416, 1.818, -0.044]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_10.geometry}
        material={materials.Yellow}
        position={[1.56, 1.659, 0.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_12.geometry}
        material={materials.Orange}
        position={[-0.821, 3.268, -0.184]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_14.geometry}
        material={materials.Yellow}
        position={[1.132, 0.86, -0.029]}
        rotation={[1.859, 0.664, 2.679]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_16.geometry}
        material={materials.Orange}
        position={[0.743, 3.099, -0.007]}
        rotation={[1.11, -1.109, 2.871]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_18.geometry}
        material={materials.Orange}
        position={[-1.377, 0.227, 0.059]}
        rotation={[-0.156, 1.191, 1.785]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_20.geometry}
        material={materials.Yellow}
        position={[-1.364, 2.73, 0.076]}
        rotation={[-2.997, 0.815, -0.465]}
      />
    </group>
  );
};

useGLTF.preload(laptop);
export default Laptop;
